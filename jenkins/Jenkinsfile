pipeline {
    agent any
    parameters {
        string(name: 'BROWSER', defaultValue: 'chrome', description: '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä (chrome/firefox)')
    }
    environment {
        ALLURE_HOME = "/opt/homebrew/bin/allure"
        MAVEN_HOME = "/opt/homebrew/bin/mvn"
        TELEGRAM_BOT_TOKEN = "8040905753:AAEeindN9glf1rRMHxj_Na0cbVsxfiY1T-E"
        TELEGRAM_CHAT_ID = "7873857"
        // –ó–Ω–∞—á–µ–Ω–∏–µ SLACK_WEBHOOK_URL –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ Jenkins Credentials
        SLACK_WEBHOOK_URL = "https://hooks.slack.com/services/dummy/url"
        PATH = "${ALLURE_HOME}:${env.PATH}"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/PetFactory1991/JavaSelenideJenkinsAllureDockerSelenoid.git'
            }
        }
        stage('Cache Maven Dependencies') {
            steps {
                sh "${MAVEN_HOME} dependency:go-offline"
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        sh "${MAVEN_HOME} clean test -Dbrowser=${params.BROWSER} -Dremote=http://165.22.93.142:4444/wd/hub"
                    }
                }
            }
        }
        stage('Generate Allure Report') {
            steps {
                sh "${ALLURE_HOME} generate allure-results -o allure-report --clean"
            }
        }
    }
    post {
        always {
            script {
                // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Allure-–æ—Ç—á—ë—Ç–∞
                def summary = readJSON file: 'allure-report/widgets/summary.json'
                def totalTests = summary.statistic.total
                def passedTests = summary.statistic.passed
                def failedTests = summary.statistic.failed
                def brokenTests = summary.statistic.broken
                def skippedTests = summary.statistic.skipped
                def durationMs = summary.time.duration
                def durationSec = (durationMs / 1000).toInteger()
                def durationMin = durationSec / 60 as int
                def durationRemainingSec = durationSec % 60 as int

                def statusEmoji = (currentBuild.result == "SUCCESS") ? "üü¢" : "üî¥"
                def allureReportUrl = "${env.BUILD_URL}/allure"

                def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                def author = sh(script: "git show -s --pretty='%an'", returnStdout: true).trim()
                def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                def commitUrl = "https://github.com/PetFactory1991/JavaSelenideJenkinsAllureDockerSelenoid/commit/${commitHash}"

                /////////////////////////////////
                // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                def telegramMessage = """*Jenkins Build Report* ${statusEmoji}
*Job:* ${env.JOB_NAME} #${env.BUILD_NUMBER}
*–°—Ç–∞—Ç—É—Å:* ${currentBuild.result}
*–ê–≤—Ç–æ—Ä:* ${author}
*Commit:* <${commitUrl}|${commitHash.take(7)}> ‚Äî ${commitMessage}

*–ü—Ä–æ–π–¥–µ–Ω–æ:* ${passedTests}   *–£–ø–∞–ª–æ:* ${failedTests}
*–°–ª–æ–º–∞–Ω–æ:* ${brokenTests}   *–ü—Ä–æ–ø—É—â–µ–Ω–æ:* ${skippedTests}
*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${durationMin} –º–∏–Ω ${durationRemainingSec} —Å–µ–∫
"""
                def telegramKeyboard = [
                    inline_keyboard: [
                        [
                            [ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Allure-–æ—Ç—á—ë—Ç", url: allureReportUrl ],
                            [ text: "–õ–æ–≥ —Å–±–æ—Ä–∫–∏", url: "${env.BUILD_URL}console" ]
                        ]
                    ]
                ]
                // –ü–µ—Ä–µ–¥–∞—ë–º reply_markup –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
                def telegramPayload = [
                    chat_id: TELEGRAM_CHAT_ID,
                    text: telegramMessage,
                    parse_mode: "Markdown",
                    disable_web_page_preview: true,
                    reply_markup: telegramKeyboard
                ]
                def telegramJson = groovy.json.JsonOutput.toJson(telegramPayload)

                def telegramResponse = httpRequest(
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: telegramJson,
                    url: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage",
                    validResponseCodes: '100:399'
                )
                echo "Telegram response: ${telegramResponse.content}"

                /////////////////////////////////
                // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Slack —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Block Kit
                def slackBlocks = [
                    blocks: [
                        [
                            type: "section",
                            text: [
                                type: "mrkdwn",
                                text: "*Jenkins Build Report* ${statusEmoji}"
                            ]
                        ],
                        [
                            type: "section",
                            fields: [
                                [
                                    type: "mrkdwn",
                                    text: "*Job:*\n${env.JOB_NAME} #${env.BUILD_NUMBER}"
                                ],
                                [
                                    type: "mrkdwn",
                                    text: "*–°—Ç–∞—Ç—É—Å:*\n${currentBuild.result}"
                                ]
                            ]
                        ],
                        [
                            type: "section",
                            text: [
                                type: "mrkdwn",
                                text: "*Commit:*\n<${commitUrl}|${commitHash.take(7)}> ‚Äî ${commitMessage}"
                            ]
                        ],
                        [
                            type: "section",
                            fields: [
                                [
                                    type: "mrkdwn",
                                    text: "*–ü—Ä–æ–π–¥–µ–Ω–æ:*\n${passedTests}"
                                ],
                                [
                                    type: "mrkdwn",
                                    text: "*–£–ø–∞–ª–æ:*\n${failedTests}"
                                ],
                                [
                                    type: "mrkdwn",
                                    text: "*–°–ª–æ–º–∞–Ω–æ:*\n${brokenTests}"
                                ],
                                [
                                    type: "mrkdwn",
                                    text: "*–ü—Ä–æ–ø—É—â–µ–Ω–æ:*\n${skippedTests}"
                                ]
                            ]
                        ],
                        [
                            type: "section",
                            text: [
                                type: "mrkdwn",
                                text: "*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n${durationMin} –º–∏–Ω ${durationRemainingSec} —Å–µ–∫"
                            ]
                        ],
                        [
                            type: "actions",
                            elements: [
                                [
                                    type: "button",
                                    text: [
                                        type: "plain_text",
                                        text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Allure-–æ—Ç—á—ë—Ç"
                                    ],
                                    url: allureReportUrl
                                ],
                                [
                                    type: "button",
                                    text: [
                                        type: "plain_text",
                                        text: "–õ–æ–≥ —Å–±–æ—Ä–∫–∏"
                                    ],
                                    url: "${env.BUILD_URL}console"
                                ]
                            ]
                        ]
                    ]
                ]
                def slackJson = groovy.json.JsonOutput.toJson(slackBlocks)

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack —á–µ—Ä–µ–∑ httpRequest, –∏—Å–ø–æ–ª—å–∑—É—è credentials
                withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_WEBHOOK_URL')]) {
                    def slackResponse = httpRequest(
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        requestBody: slackJson,
                        url: SLACK_WEBHOOK_URL,
                        validResponseCodes: '100:399'
                    )
                    echo "Slack response: ${slackResponse.content}"
                }
            }
            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è Allure-–æ—Ç—á—ë—Ç–∞
            allure includeProperties: false, results: [[path: "allure-results"]]
        }
    }
}
