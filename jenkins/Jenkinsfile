pipeline {
	agent any
    parameters {
		string(name: 'BROWSER', defaultValue: 'chrome', description: '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä (chrome/firefox)')
    }
    environment {
		ALLURE_HOME = "/opt/homebrew/bin/allure"
        MAVEN_HOME = "/opt/homebrew/bin/mvn"
        TELEGRAM_BOT_TOKEN = "8040905753:AAEeindN9glf1rRMHxj_Na0cbVsxfiY1T-E"
        TELEGRAM_CHAT_ID = "7873857"
        SLACK_WEBHOOK_URL = "https://hooks.slack.com/services/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"
        PATH = "${ALLURE_HOME}:${env.PATH}"
    }
    stages {
		stage('Checkout') {
			steps {
				git branch: 'main', url: 'https://github.com/PetFactory1991/JavaSelenideJenkinsAllureDockerSelenoid.git'
            }
        }
        stage('Cache Maven Dependencies') {
			steps {
				sh "${MAVEN_HOME} dependency:go-offline"
            }
        }
        stage('Run Tests') {
			steps {
				script {
					catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
						sh "${MAVEN_HOME} clean test -Dbrowser=${params.BROWSER} -Dremote=http://165.22.93.142:4444/wd/hub"
                    }
                }
            }
        }
        stage('Generate Allure Report') {
			steps {
				sh "${ALLURE_HOME} generate allure-results -o allure-report --clean"
            }
        }
    }
    post {
		always {
			script {
				def summary = readJSON file: 'allure-report/widgets/summary.json'

                def totalTests = summary.statistic.total
                def passedTests = summary.statistic.passed
                def failedTests = summary.statistic.failed
                def brokenTests = summary.statistic.broken
                def skippedTests = summary.statistic.skipped
                def durationMs = summary.time.duration
                def durationSec = (durationMs / 1000).toInteger()
                def durationMin = durationSec / 60 as int
                def durationRemainingSec = durationSec % 60 as int

                def statusEmoji = (currentBuild.result == "SUCCESS") ? "üü¢" : "üî¥"
                def allureReportUrl = "${env.BUILD_URL}/allure"

                def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                def author = sh(script: "git show -s --pretty='%an'", returnStdout: true).trim()
                def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                def commitUrl = "https://github.com/PetFactory1991/JavaSelenideJenkinsAllureDockerSelenoid/commit/${commitHash}"

                def telegramMessage = """üîπ *Jenkins Report* üîπ
üìå *Job:* ${env.JOB_NAME} #${env.BUILD_NUMBER}
üë§ *–ê–≤—Ç–æ—Ä:* ${author}
üí¨ *–ö–æ–º–º–∏—Ç:* [${commitHash.take(7)}](${commitUrl}) ‚Äî ${commitMessage}
üåç *Browser:* ${params.BROWSER.toUpperCase()} | Remote: 165.22.93.142
üîó [Allure Report](${allureReportUrl})

üìä *–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* ${totalTests}
‚úÖ *–ü—Ä–æ—à–ª–æ:* ${passedTests}
‚ùå *–£–ø–∞–ª–æ:* ${failedTests}
‚ö†Ô∏è *–°–ª–æ–º–∞–Ω–æ:* ${brokenTests}
‚è© *–ü—Ä–æ–ø—É—â–µ–Ω–æ:* ${skippedTests}

‚è± *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${durationMin} –º–∏–Ω ${durationRemainingSec} —Å–µ–∫

${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${currentBuild.result}"""

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                sh """
                    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                    -d chat_id=${TELEGRAM_CHAT_ID} \
                    -d text="${telegramMessage}" \
                    -d parse_mode="Markdown" \
                    -d disable_web_page_preview=true
                """

                // Slack –æ—Ç–ø—Ä–∞–≤–∫–∞
                def slackMessage = [
                    text: "*Jenkins Report* ${statusEmoji}",
                    attachments: [[
                        color: (currentBuild.result == "SUCCESS") ? "good" : "danger",
                        fields: [
                            [title: "Job", value: "${env.JOB_NAME} #${env.BUILD_NUMBER}", short: true],
                            [title: "–ê–≤—Ç–æ—Ä", value: author, short: true],
                            [title: "Browser", value: "${params.BROWSER.toUpperCase()}", short: true],
                            [title: "–ö–æ–º–º–∏—Ç", value: "<${commitUrl}|${commitHash.take(7)}> ‚Äî ${commitMessage}", short: false],
                            [title: "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤", value: "${totalTests}", short: true],
                            [title: "–ü—Ä–æ—à–ª–æ ‚úÖ", value: "${passedTests}", short: true],
                            [title: "–£–ø–∞–ª–æ ‚ùå", value: "${failedTests}", short: true],
                            [title: "–°–ª–æ–º–∞–Ω–æ ‚ö†Ô∏è", value: "${brokenTests}", short: true],
                            [title: "–ü—Ä–æ–ø—É—â–µ–Ω–æ ‚è©", value: "${skippedTests}", short: true],
                            [title: "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚è±", value: "${durationMin} –º–∏–Ω ${durationRemainingSec} —Å–µ–∫", short: true],
                            [title: "–û—Ç—á—ë—Ç üìã", value: "<${allureReportUrl}|–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç—á—ë—Ç—É>", short: false]
                        ]
                    ]]
                ]

                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    -d '${groovy.json.JsonOutput.toJson(slackMessage)}' \
                    ${SLACK_WEBHOOK_URL}
                """
            }

            allure includeProperties: false, results: [[path: "allure-results"]]
        }
    }
}
